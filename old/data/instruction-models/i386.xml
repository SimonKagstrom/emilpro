  <InstructionModel name="add" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Add two values (of which one can reside in memory)</description>
  </InstructionModel>
  <InstructionModel name="call" architecture="i386" timestamp="0">
    <type>call</type>
    <privileged>false</privileged>
    <description>Call function.

The address to the next instruction is pushed to the stack.</description>
  </InstructionModel>
  <InstructionModel name="callq" architecture="i386" timestamp="0">
    <type>call</type>
    <privileged>false</privileged>
    <description>Call function</description>
  </InstructionModel>
  <InstructionModel name="cwtl" architecture="i386" timestamp="0">
    <type>data_handling</type>
    <privileged>false</privileged>
    <description>Convert word to long (extend the signed ax value into eax)</description>
  </InstructionModel>
  <InstructionModel name="dec" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Decrement register or memory location with 1.

Does not affect the</description>
  </InstructionModel>
  <InstructionModel name="hlt" architecture="i386" timestamp="0">
    <type>other</type>
    <privileged>true</privileged>
    <description>Halt the processor.</description>
  </InstructionModel>
  <InstructionModel name="inc" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Increment register/memory location with 1</description>
  </InstructionModel>
  <InstructionModel name="int3" architecture="i386" timestamp="0">
    <type>other</type>
    <privileged>false</privileged>
    <description>Cause debug exception</description>
  </InstructionModel>
  <InstructionModel name="ja" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>
  </description>
  </InstructionModel>
  <InstructionModel name="jbe" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Branch if below or equal.

Check if CF == 1 or ZF == 1 in the
eflags register.</description>
  </InstructionModel>
  <InstructionModel name="je" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Branch if equal</description>
  </InstructionModel>
  <InstructionModel name="jg" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Jump if greater</description>
  </InstructionModel>
  <InstructionModel name="jle" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Jump if less then or equal.</description>
  </InstructionModel>
  <InstructionModel name="jmp" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Unconditional branch</description>
  </InstructionModel>
  <InstructionModel name="jmpq" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Branch unconditionally</description>
  </InstructionModel>
  <InstructionModel name="jne" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Jump if not equal</description>
  </InstructionModel>
  <InstructionModel name="mov" architecture="i386" timestamp="0">
    <type>data_handling</type>
    <privileged>false</privileged>
    <description>Copy data from memory/registers onto another location.</description>
  </InstructionModel>
  <InstructionModel name="movl" architecture="i386" timestamp="0">
    <type>data_handling</type>
    <privileged>false</privileged>
    <description>Copy data from memory/registers onto another location.</description>
  </InstructionModel>
  <InstructionModel name="nop" architecture="i386" timestamp="0">
    <type>other</type>
    <privileged>false</privileged>
    <description>No operation</description>
  </InstructionModel>
  <InstructionModel name="pop" architecture="i386" timestamp="0">
    <type>data_handling</type>
    <privileged>false</privileged>
    <description>Pop one entry from the stack.

The number of bytes depends on the destination size.</description>
  </InstructionModel>
  <InstructionModel name="push" architecture="i386" timestamp="0">
    <type>data_handling</type>
    <privileged>false</privileged>
    <description>Push register contents or contents from a memory location on the stack.</description>
  </InstructionModel>
  <InstructionModel name="ret" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Return from function. Pops an address off the top of the stack and jumps there.</description>
  </InstructionModel>
  <InstructionModel name="retq" architecture="i386" timestamp="0">
    <type>cflow</type>
    <privileged>false</privileged>
    <description>Return from function (pop return address from stack and jump there)</description>
  </InstructionModel>
  <InstructionModel name="shr" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Shift logical right</description>
  </InstructionModel>
  <InstructionModel name="sub" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Subtract value from register or memory location.</description>
  </InstructionModel>
  <InstructionModel name="test" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Compare operands.

Sets EFLAGS for use with branch instructions.</description>
  </InstructionModel>
  <InstructionModel name="xor" architecture="i386" timestamp="0">
    <type>arithmetic_logic</type>
    <privileged>false</privileged>
    <description>Exclusive or</description>
  </InstructionModel>
